#include <iostream>
#include "CRC.h"

int main()
{
	char string[] = "123456789";
	uint8_t n8result1, n8result2;
	uint16_t n16result1, n16result2;
	uint32_t n32result1, n32result2;

	n8result1 = CRC8(false).calculate(string);
	n8result2 = CRC8(true).calculate(string);
	printf("CRC-8: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_CDMA2000(false).calculate(string);
	n8result2 = CRC8_CDMA2000(true).calculate(string);
	printf("CRC-8/CDMA2000: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_DARC(false).calculate(string);
	n8result2 = CRC8_DARC(true).calculate(string);
	printf("CRC-8/DARC: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_DVB_S2(false).calculate(string);
	n8result2 = CRC8_DVB_S2(true).calculate(string);
	printf("CRC-8/DVB-S2: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_EBU(false).calculate(string);
	n8result2 = CRC8_EBU(true).calculate(string);
	printf("CRC-8/EBU: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_I_CODE(false).calculate(string);
	n8result2 = CRC8_I_CODE(true).calculate(string);
	printf("CRC-8/I-CODE: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_ITU(false).calculate(string);
	n8result2 = CRC8_ITU(true).calculate(string);
	printf("CRC-8/ITU: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_MAXIM(false).calculate(string);
	n8result2 = CRC8_MAXIM(true).calculate(string);
	printf("CRC-8/MAXIM: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_ROHC(false).calculate(string);
	n8result2 = CRC8_ROHC(true).calculate(string);
	printf("CRC-8/ROHC: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	n8result1 = CRC8_WCDMA(false).calculate(string);
	n8result2 = CRC8_WCDMA(true).calculate(string);
	printf("CRC-8/WCMDA: <calc> 0x%02X, <LUT> 0x%02X\n", n8result1, n8result2);
	printf("\n");
	n16result1 = CRC16_CCITT_FALSE(false).calculate(string);
	n16result2 = CRC16_CCITT_FALSE(true).calculate(string);
	printf("CRC-16/CCITT-FALSE: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_ARC(false).calculate(string);
	n16result2 = CRC16_ARC(true).calculate(string);
	printf("CRC-16/ARC: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_AUG_CCITT(false).calculate(string);
	n16result2 = CRC16_AUG_CCITT(true).calculate(string);
	printf("CRC-16/AUG-CCITT: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_BUYPASS(false).calculate(string);
	n16result2 = CRC16_BUYPASS(true).calculate(string);
	printf("CRC-16/BUYPASS: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_CMDA2000(false).calculate(string);
	n16result2 = CRC16_CMDA2000(true).calculate(string);
	printf("CRC-16/CDMA2000: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_DDS_110(false).calculate(string);
	n16result2 = CRC16_DDS_110(true).calculate(string);
	printf("CRC-16/DDS-110: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_DECT_R(false).calculate(string);
	n16result2 = CRC16_DECT_R(true).calculate(string);
	printf("CRC-16/DECT-R: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_DECT_X(false).calculate(string);
	n16result2 = CRC16_DECT_X(true).calculate(string);
	printf("CRC-16/DECT-X: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_DNP(false).calculate(string);
	n16result2 = CRC16_DNP(true).calculate(string);
	printf("CRC-16/DNP: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_EN_13757(false).calculate(string);
	n16result2 = CRC16_EN_13757(true).calculate(string);
	printf("CRC-16/EN-13757: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_GENIBUS(false).calculate(string);
	n16result2 = CRC16_GENIBUS(true).calculate(string);
	printf("CRC-16/GENIBUS: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_MAXIM(false).calculate(string);
	n16result2 = CRC16_MAXIM(true).calculate(string);
	printf("CRC-16/MAXIM: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_MCRF4XX(false).calculate(string);
	n16result2 = CRC16_MCRF4XX(true).calculate(string);
	printf("CRC-16/MCRF4XX: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_RIELLO(false).calculate(string);
	n16result2 = CRC16_RIELLO(true).calculate(string);
	printf("CRC-16/RIELLO: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_T10_DIF(false).calculate(string);
	n16result2 = CRC16_T10_DIF(true).calculate(string);
	printf("CRC-16/T10-DIF: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_TELEDISK(false).calculate(string);
	n16result2 = CRC16_TELEDISK(true).calculate(string);
	printf("CRC-16/TELEDISK: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_TMS37157(false).calculate(string);
	n16result2 = CRC16_TMS37157(true).calculate(string);
	printf("CRC-16/TMS37157: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_USB(false).calculate(string);
	n16result2 = CRC16_USB(true).calculate(string);
	printf("CRC-16/USB: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC_A(false).calculate(string);
	n16result2 = CRC_A(true).calculate(string);
	printf("CRC-A: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_KERMIT(false).calculate(string);
	n16result2 = CRC16_KERMIT(true).calculate(string);
	printf("CRC16/KERMIT: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_MODBUS(false).calculate(string);
	n16result2 = CRC16_MODBUS(true).calculate(string);
	printf("CRC16/MODBUS: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_X_25(false).calculate(string);
	n16result2 = CRC16_X_25(true).calculate(string);
	printf("CRC16/X-25: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	n16result1 = CRC16_XMODEM(false).calculate(string);
	n16result2 = CRC16_XMODEM(true).calculate(string);
	printf("CRC16/XMODEM: <calc> 0x%04X, <LUT> 0x%04X\n", n16result1, n16result2);
	printf("\n");
	n32result1 = CRC32(false).calculate(string);
	n32result2 = CRC32(true).calculate(string);
	printf("CRC-32: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_BZIP2(false).calculate(string);
	n32result2 = CRC32_BZIP2(true).calculate(string);
	printf("CRC-32/BZIP2: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_C(false).calculate(string);
	n32result2 = CRC32_C(true).calculate(string);
	printf("CRC-32C: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_D(false).calculate(string);
	n32result2 = CRC32_D(true).calculate(string);
	printf("CRC-32D: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_MPEG_2(false).calculate(string);
	n32result2 = CRC32_MPEG_2(true).calculate(string);
	printf("CRC-32/MPEG-2: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_POSIX(false).calculate(string);
	n32result2 = CRC32_POSIX(true).calculate(string);
	printf("CRC-32/POSIX: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_Q(false).calculate(string);
	n32result2 = CRC32_Q(true).calculate(string);
	printf("CRC-32Q: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_JAMCRC(false).calculate(string);
	n32result2 = CRC32_JAMCRC(true).calculate(string);
	printf("CRC-32/JAMCRC: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
	n32result1 = CRC32_XFER(false).calculate(string);
	n32result2 = CRC32_XFER(true).calculate(string);
	printf("CRC-32/XFER: <calc> 0x%08X, <LUT> 0x%08X\n", n32result1, n32result2);
}
